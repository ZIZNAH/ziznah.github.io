<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ziznah.github.io</id>
    <title>卷毛</title>
    <updated>2022-10-05T18:27:34.484Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ziznah.github.io"/>
    <link rel="self" href="https://ziznah.github.io/atom.xml"/>
    <subtitle>没有撤退可言。</subtitle>
    <logo>https://ziznah.github.io/images/avatar.png</logo>
    <icon>https://ziznah.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 卷毛</rights>
    <entry>
        <title type="html"><![CDATA[Mikrotik 指定不同网关与DNS]]></title>
        <id>https://ziznah.github.io/post/mikrotik-zhi-ding-bu-tong-wang-guan-yu-dns/</id>
        <link href="https://ziznah.github.io/post/mikrotik-zhi-ding-bu-tong-wang-guan-yu-dns/">
        </link>
        <updated>2022-03-19T02:42:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mikrotik-指定不同网关与dns">Mikrotik 指定不同网关与DNS</h1>
<blockquote>
<p><strong>RouterOS</strong> 使用 **DHCP Options **，手动指定不同设备使用不同网关与 DNS。</p>
</blockquote>
<h2 id="本地设置">本地设置</h2>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/image-20220319102510038.png" alt="image-20220319102510038" loading="lazy"></figure>
<p>我的 <code>ROS</code> 地址为 <code>192.168.5.1</code>，DHCP 服务器分配的网关为<code>192.168.5.1</code>，DNS 服务器为<code>192.168.5.1</code> （因为我开启了 ROS 缓存功能）</p>
<p>默认接入的设备分配到的网关和 DNS 就是 192.168.5.1。那么如何实现随意设备走指定网关呢，就需要用到 Options 功能：</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/image-20220319102852328.png" alt="image-20220319102852328" loading="lazy"></figure>
<h2 id="options-参数">Options 参数</h2>
<p><strong>Name：</strong> 名称，这个随意<br>
<strong>Code：</strong> Options 编号，用数字表示。 3 表示网关， 6 表示 DNS。后面会将详细的表贴出来<br>
<strong>Value：</strong> Options 参数，对应前面的编号。这里我们需要填入’IP 地址’(包含引号，需要英文输入法)</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/image-20220319103045818.png" alt="image-20220319103045818" loading="lazy"></figure>
<p>填入对应参数后，点 OK 确认保存</p>
<h2 id="内网设备设置">内网设备设置</h2>
<blockquote>
<p>先将接入网络的设备设置静态地址，再手动设置DHCP选项。</p>
</blockquote>
<p>打开<code>DHCP Server</code>→<code>Leases</code> 找到要设置的设备</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/image-20220319103331040.png" alt="image-20220319103331040" loading="lazy"></figure>
<p>右键指定设备 设置<code>Make Static</code></p>
<figure data-type="image" tabindex="5"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/image-20220319103555151.png" alt="image-20220319103555151" loading="lazy"></figure>
<p>双击指定设备，在<code>DHCP Lease</code> 中<code>General</code>选项下拉找到 <code>DHCP Options</code>，选择添加的<code>Options</code>选项，应用确定即可。</p>
<figure data-type="image" tabindex="6"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/image-20220319103753592.png" alt="image-20220319103753592" loading="lazy"></figure>
<p>这样设置的好处就是可以设置全局分配 ROS 网关，只将需要经过旁路由的设备才会走旁路由，一来可以避免 NAS 等设备经过代理，二来任你怎么折腾旁路由，家人的设备也不会受到影响。</p>
<h2 id="options其他参数详情"><code>Options</code>其他参数详情</h2>
<table>
<thead>
<tr>
<th>Options号</th>
<th style="text-align:center">Options作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">设置子网掩码选项。</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">设置网关地址选项。</td>
</tr>
<tr>
<td>6</td>
<td style="text-align:center">设置DNS服务器地址选项。</td>
</tr>
<tr>
<td>12</td>
<td style="text-align:center">设置域名选项。</td>
</tr>
<tr>
<td>15</td>
<td style="text-align:center">设置域名后缀选项。</td>
</tr>
<tr>
<td>33</td>
<td style="text-align:center">设置静态路由选项。该选项中包含一组有分类静态路由（即目的地址的掩码固定为自然掩码，不能划分子网），客户端收到该选项后，将在路由表中添加这些静态路由。如果存在Option121，则忽略该选项。</td>
</tr>
<tr>
<td>44</td>
<td style="text-align:center">设置NetBios服务器选项。</td>
</tr>
<tr>
<td>46</td>
<td style="text-align:center">设置NetBios节点类型选项。</td>
</tr>
<tr>
<td>50</td>
<td style="text-align:center">设置请求IP选项。</td>
</tr>
<tr>
<td>51</td>
<td style="text-align:center">设置IP地址租约时间选项。</td>
</tr>
<tr>
<td>52</td>
<td style="text-align:center">设置Option附加选项。</td>
</tr>
<tr>
<td>53</td>
<td style="text-align:center">设置DHCP消息类型。</td>
</tr>
<tr>
<td>54</td>
<td style="text-align:center">设置服务器标识。</td>
</tr>
<tr>
<td>55</td>
<td style="text-align:center">设置请求参数列表选项。客户端利用该选项指明需要从服务器获取哪些网络配置参数。该选项内容为客户端请求的参数对应的选项值。</td>
</tr>
<tr>
<td>58</td>
<td style="text-align:center">设置续约T1时间，一般是租期时间的50%。</td>
</tr>
<tr>
<td>59</td>
<td style="text-align:center">设置续约T2时间。一般是租期时间的87.5%。</td>
</tr>
<tr>
<td>60</td>
<td style="text-align:center">设置厂商分类信息选项，用于标识DHCP客户端的类型和配置。</td>
</tr>
<tr>
<td>61</td>
<td style="text-align:center">设置客户端标识选项。</td>
</tr>
<tr>
<td>66</td>
<td style="text-align:center">设置TFTP服务器名选项，用来指定为客户端分配的TFTP服务器的域名。</td>
</tr>
<tr>
<td>67</td>
<td style="text-align:center">设置启动文件名选项，用来指定为客户端分配的启动文件名。</td>
</tr>
<tr>
<td>77</td>
<td style="text-align:center">设置用户类型标识。</td>
</tr>
<tr>
<td>121</td>
<td style="text-align:center">设置无分类路由选项。该选项中包含一组无分类静态路由（即目的地址的掩码为任意值，可以通过掩码来划分子网），客户端收到该选项后，将在路由表中添加这些静态路由。</td>
</tr>
<tr>
<td>148</td>
<td style="text-align:center">EasyDeploy中Commander的IP地址。</td>
</tr>
<tr>
<td>149</td>
<td style="text-align:center">SFTP和FTPS服务器的IP地址。</td>
</tr>
<tr>
<td>150</td>
<td style="text-align:center">设置TFTP服务器地址选项，指定为客户端分配的TFTP服务器的地址。</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用nacos做配置中心]]></title>
        <id>https://ziznah.github.io/post/nacos-config/</id>
        <link href="https://ziznah.github.io/post/nacos-config/">
        </link>
        <updated>2021-09-11T22:11:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用nacos做配置中心">使用nacos做配置中心</h1>
<blockquote>
<p>本示例针对指定的nacos版本以及springcloud版本 （小版本可对照尝试，大版本建议查看官方文档）</p>
<p><code>spring-cloud-alibaba</code> ：2.1.0.RELEASE</p>
<p><code>spring-cloud-starter-alibaba-nacos-config</code>：2.1.0.RELEASE</p>
</blockquote>
<h2 id="依赖">依赖</h2>
<p>在pom.xml 文件，引入 Nacos Config Starter。</p>
<pre><code class="language-java"> &lt;dependency&gt;
     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
 &lt;/dependency&gt;
</code></pre>
<h2 id="配置-nacos-config">配置 Nacos Config</h2>
<ol>
<li>
<p>在<code>/src/main/resources/</code>下新建<code>bootstrap.properties</code>配置文件</p>
</li>
<li>
<p>配置文件中进行如下配置</p>
</li>
</ol>
<pre><code class="language-java">spring.application.name=微服务名
spring.cloud.nacos.config.server-addr=nacos server地址:8848
</code></pre>
<h2 id="注解">注解</h2>
<ol>
<li>使用<code>@Value</code>来获取配置中的数据</li>
<li>使用<code>@RefreshScope</code>打开动态刷新功能</li>
</ol>
<p>如下：</p>
<pre><code class="language-java"> @RefreshScope
 class SampleController {

 	@Value(&quot;${user.name}&quot;)
 	String userName;

 	@Value(&quot;${user.age}&quot;)
 	int age;
 }
</code></pre>
<h2 id="使用">使用</h2>
<p>在<code>Nacos Config</code>中动态使用修改配置：</p>
<ol>
<li>在配置中心默认添加一个 数据集（Data Id）<code>应用名.properties</code> ，<code>group</code> 默认为 <code>DEFAULT_GROUP</code>，可以通过 <code>spring.cloud.nacos.config.group</code> 配置。</li>
<li>配置格式选择 <code>Properties</code>。</li>
<li>配置内容中使用<code>Properties</code>格式进行配置更改或者添加。</li>
</ol>
<h2 id="注意事项">注意事项</h2>
<ol>
<li>如果Nacos Config和配置文件中有相同的配置信息，则Nacos Config中的数据有最高优先级。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringCloud-OpenFeign远程调用]]></title>
        <id>https://ziznah.github.io/post/openfeign/</id>
        <link href="https://ziznah.github.io/post/openfeign/">
        </link>
        <updated>2021-09-11T19:15:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="springcloud-openfeign远程调用">SpringCloud-OpenFeign远程调用</h1>
<h2 id="1-引入open-feign">1.  引入open-feign</h2>
<p>引入依赖</p>
<pre><code class="language-java">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="2-声明远程接口">2. 声明远程接口</h2>
<p>编写一个接口，告诉 SpringCloud 这个接口需要调用远程服务</p>
<p>（将需要调用的方法完整签名复制到这个接口中）</p>
<p><strong>定义的接口：</strong></p>
<pre><code class="language-java">//路径需要使用nacas注册中心中的名称
@FeignClient(name = &quot;要调用微服务的applicationName&quot;)
public interface xxxFeignService{
    
    
    //    远程调用的路径需要完整
    @RequestMapping(&quot;/aaa/bbb&quot;)
    public R aaabbb();
    
}
</code></pre>
<p><strong>被调用的微服务的方法：</strong></p>
<pre><code class="language-java">@RequestMapping(&quot;aaa&quot;)
public class xxxController {

    @RequestMapping(&quot;/bbb&quot;)
    public R xxx(){

        return &quot;&quot;;
    }
}
</code></pre>
<h2 id="3-开启远程调用功能">3. 开启远程调用功能</h2>
<p><code>@EnableFeignClients(basePackages = &quot;xxx.feign&quot;)</code></p>
<p>例子：</p>
<pre><code class="language-java">@EnableFeignClients(basePackages = &quot;xxx.feign&quot;)	//这里写定义接口的包地址引用
@SpringBootApplication
@EnableDiscoveryClient
public class xxxApplication {
    public static void main(String[] args) {
        SpringApplication.run(xxxApplication.class, args);
    }
}
</code></pre>
<h2 id="问题">问题</h2>
<p>由于Spring Cloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer，所以不引入spring-cloud-loadbalancer会报错。</p>
<p><strong>解决办法：</strong></p>
<p>加入spring-cloud-loadbalancer依赖，并且在nacos中排除ribbon依赖。</p>
<pre><code class="language-java">&lt;!--nacos服务注册--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
    &lt;!--排除ribbon--&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;

&lt;!--引入spring-cloud-starter-loadbalancer--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;
    &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快速搭建豆瓣刮削器代理]]></title>
        <id>https://ziznah.github.io/post/kuai-su-da-jian-dou-ban-gua-xue-qi-dai-li/</id>
        <link href="https://ziznah.github.io/post/kuai-su-da-jian-dou-ban-gua-xue-qi-dai-li/">
        </link>
        <updated>2021-06-28T07:54:55.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>由于公用的搜刮器用的是同一个代理，随着大量的用户访问，导致代理挂了，搭建自己的代理实现搜刮自由。</p>
</blockquote>
<h2 id="在cloudflare建立workers应用">在cloudflare建立<code>workers</code>应用</h2>
<ol>
<li>
<p>打开 https://dash.cloudflare.com/sign-up，注册自己的账号。</p>
</li>
<li>
<p>在个人主页中，右侧点击建立“workers”应用。</p>
</li>
<li>
<p>点击“创建worker”。</p>
</li>
<li>
<p>删除内置代码，复制下面的内容。</p>
</li>
</ol>
<pre><code class="language-shell">addEventListener('fetch', event =&gt; {
event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {
targetUrl = request.url.split('-----')[1]
return await fetch(targetUrl)
}
</code></pre>
<ol start="5">
<li>点击“保存并部署”。</li>
</ol>
<p><strong>PS</strong>:可以workers可以自定义名称，后面要使用。</p>
<h2 id="群晖ssh安装">群晖SSH安装</h2>
<pre><code class="language-shell">安装：

1. ssh 登录群晖系统
2. 执行wget https://raw.githubusercontent.com/jswh/synology_video_station_douban_plugin/master/install.sh
3. 执行sudo bash install.sh uninstall （第一次安装可以跳过这个步骤）
4. 执行sudo bash install.sh install 'http://douban.abc.workers.dev'
http://douban.abc.workers.dev 为上方workers部署到的域名地址

卸载

1. ssh 登录群晖系统
2. 执行wget https://raw.githubusercontent.com/jswh/synology_video_station_douban_plugin/master/install.sh
3. 执行sudo bash install.sh uninstall
</code></pre>
<p>更改演员表中英文为中文</p>
<ol>
<li>
<p>找到douban.php文件</p>
<pre><code class="language-shell">douban.php在以下文件夹中
/var/packages/VideoStation/target/plugins/syno_file_assets
</code></pre>
</li>
<li>
<p>添加替换代码</p>
<pre><code class="language-shell">foreach ($movie_data-&gt;{$fn}() as $item) {
        if (!in_array($item['name'], $data[$key])) {
        	#在此位置添加以下代码
        	$item['name']= explode(&quot; &quot;, $item['name']);
             array_push($data[$key], format_the_name($item['name']));
        }
        }
</code></pre>
</li>
</ol>
<h2 id="群晖访问github">群晖访问GitHub</h2>
<blockquote>
<p>上方下载脚本的时候，如果访问不了GitHub，解决方式是以 root 权限修改群晖的 hosts 文件，重新指向刮削器可以正常访问的 IP 地址即可。</p>
</blockquote>
<ol>
<li>
<p>首先先用 SSH 工具以 root 权限登录群晖。然后输入<code>vim /etc/hosts</code>打开 hosts 文件</p>
</li>
<li>
<p>英文输入法下在键盘上按下<code>i</code>键进入编辑模式，然后添加以下内容</p>
<pre><code class="language-shell">140.82.114.3 github.com
185.199.108.153 assets-cdn.github.com
199.232.69.194 github.global.ssl.fastly.net
</code></pre>
</li>
<li>
<p>然后按键盘上的<code>ESC</code>键退出编辑，再输入<code>:wq</code> 保存并退出编辑器。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[视频硬解图示]]></title>
        <id>https://ziznah.github.io/post/shi-pin-ying-jie-tu-shi/</id>
        <link href="https://ziznah.github.io/post/shi-pin-ying-jie-tu-shi/">
        </link>
        <updated>2021-05-24T17:48:47.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>由于现使用Android TV盒子过于卡顿，于是购买HTPC 小主机想法油然而生，主要用来不时之需来使用一下，毕竟APPLE TV 4K(二代)已经在路上。主要用途还是看视频，能够轻松胜任视频硬解，看到贴吧有大佬制作了一个显卡硬解表格，由此再集合一下。</p>
</blockquote>
<p><strong>大佬原帖：</strong> <a href="https://tieba.baidu.com/p/6248044721?fid=352902&amp;pid=127430527352&amp;red_tag=1819330808#127430527352">原帖</a></p>
<h2 id="核显">核显</h2>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/5762bfa1cd11728b46e29509c7fcc3cec2fd2cab.png" alt="核显" loading="lazy"></figure>
<h2 id="amd显卡">AMD显卡</h2>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/50ead13f8794a4c271ecfe0001f41bd5ac6e39ab.png" alt="AMD显卡" loading="lazy"></figure>
<h2 id="nvidia显卡">NVIDIA显卡</h2>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/5762bfa1cd11728b47e99409c7fcc3cec2fd2cb2.png" alt="NVIDIA显卡" loading="lazy"></figure>
<h2 id="核显对应的部分cpu">核显对应的部分CPU</h2>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/zoengzihaam/ImgBed/images/1149d10735fae6cd657bb24a00b30f2443a70fab.png" alt="CPU" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 远程root登录]]></title>
        <id>https://ziznah.github.io/post/21/</id>
        <link href="https://ziznah.github.io/post/21/">
        </link>
        <updated>2021-04-02T08:48:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ubuntu远程root登录">Ubuntu远程root登录</h1>
<blockquote>
<p>低价购买了三年的腾讯云vps，尝试远程ssh登录的时候，发现无法使用root用户登录，只能使用默认的用户名，这就大大增加了使用时候的操作步骤，于是就尝试给Ubuntu赋予远程root使用的权限。</p>
</blockquote>
<h2 id="增加一个root密码">增加一个root密码</h2>
<blockquote>
<p>默认主机是没有root密码，我们这里新增一个root的密码。</p>
</blockquote>
<p>建议使用相同但不简单的密码，防止忘记也防止太简单出现数据损失。</p>
<pre><code class="language-shell">sudo passwd root
</code></pre>
<p>这里需要输入两次密码，出现修改成功即可。</p>
<h2 id="修改sshd配置">修改sshd配置</h2>
<blockquote>
<p><code>sshd</code>中默认不使用ROOT登录，修改<code>sshd</code>的配置文件来开启一下。</p>
</blockquote>
<ol>
<li>
<p>修改<code>sshd</code>的配置文件</p>
<pre><code class="language-shell">sudo vim /etc/ssh/sshd_config
</code></pre>
</li>
<li>
<p>修改 <code>PermitRootLogin</code> 的默认参数</p>
<p>这里我在原属性下面添加相同的属性，保留了原来的配置内容。</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402163653.png" alt="image-20210402163653587" loading="lazy"></figure>
</li>
<li>
<p>重启<code>ssh</code>服务</p>
<pre><code class="language-shell">sudo service ssh restart
</code></pre>
</li>
</ol>
<p>自此，这台vps主机就可以远程进行root登录。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于WIN10下启动应用程序出现MSVCR110.dll缺失的解决办法]]></title>
        <id>https://ziznah.github.io/post/20/</id>
        <link href="https://ziznah.github.io/post/20/">
        </link>
        <updated>2021-04-02T07:49:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="关于win10下启动应用程序出现msvcr110dll缺失的解决办法">关于WIN10下启动应用程序出现MSVCR110.dll缺失的解决办法</h1>
<blockquote>
<p>由于更换了电脑硬件，介于有工作环境的原因，没有彻底的重装系统，而是使用WIN10自带的重置，导致重装其他软件的时候，打开出现XXX.dll缺失无法启动应用程序。</p>
</blockquote>
<h2 id="问题">问题</h2>
<p>安装<code>xshell</code>之后，启动时出现：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">由</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">找</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">到</mi><mi>M</mi><mi>S</mi><mi>V</mi><mi>C</mi><mi>R</mi><mn>110.</mn><mi>d</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">无</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">继</mi><mi mathvariant="normal">续</mi><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">码</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">安</mi><mi mathvariant="normal">装</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">能</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">决</mi><mi mathvariant="normal">此</mi><mi mathvariant="normal">问</mi><mi mathvariant="normal">题</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">由于找不到 MSVCR110.dll，无法继续执行代码。重新安装程序可能会解决此问题。
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">找</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">无</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">继</span><span class="mord cjk_fallback">续</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">安</span><span class="mord cjk_fallback">装</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">。</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">由</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">找</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">到</mi><mi>M</mi><mi>S</mi><mi>V</mi><mi>C</mi><mi>P</mi><mn>110.</mn><mi>d</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">无</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">继</mi><mi mathvariant="normal">续</mi><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">码</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">重</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">安</mi><mi mathvariant="normal">装</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">能</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">决</mi><mi mathvariant="normal">此</mi><mi mathvariant="normal">问</mi><mi mathvariant="normal">题</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">由于找不到 MSVCP110.dll，无法继续执行代码。重新安装程序可能会解决此问题。
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">找</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">无</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">继</span><span class="mord cjk_fallback">续</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">安</span><span class="mord cjk_fallback">装</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">。</span></span></span></span></span></p>
<h2 id="寻找解决办法">寻找解决办法</h2>
<p>在微软的社区交流中发现遇到相同问题的用户，<code>Microsoft 代理 审阅人</code>给出的解决方法是：</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402154150.png" alt="image-20210402154150081" loading="lazy"></figure>
<p>我根据解决办法，安装了指定版本的VC++运行库</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402154356.png" alt="image-20210402154356642" loading="lazy"></figure>
<p>重新运行<code>xshell</code>但是还是出现了文件缺失的提示，我将软件重装以及电脑重启，均无法解决此问题。</p>
<h2 id="最终方法">最终方法</h2>
<p>如果你的电脑系统是X64的，则需要将 <code>vcredist_x64.exe</code> 以及 <code>vcredist_x86.exe</code> 全部勾选并安装，再次打开应用程序解决报错问题。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/20210402154626.png" alt="image-20210402154625922" loading="lazy"></figure>
<p><strong>微软Visual C++ 运行库下载地址：</strong></p>
<p><code>https://www.microsoft.com/en-us/download/details.aspx?id=30679</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NetflixDNS解锁]]></title>
        <id>https://ziznah.github.io/post/netflixdns-jie-suo/</id>
        <link href="https://ziznah.github.io/post/netflixdns-jie-suo/">
        </link>
        <updated>2021-01-12T06:32:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="netflixdns解锁">NetflixDNS解锁</h1>
<blockquote>
<p>由于Netflix的版权问题，使用一般的代理服务跨区看剧时会被 Netflix 检测到并阻止，当我们使用的vps不能观看Netflix的时候，我们可以选择购买便宜大碗的vps来辅助解锁不能查看Netflix的vps。</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<p>正式开始之前，我们需要做一些基本的准备，你至少需要这些东西：</p>
<ul>
<li>支持 Netflix 的代理服务</li>
<li>不支持 Netflix 的代理服务</li>
<li>Netflix订阅</li>
</ul>
<p><strong>就目前而言，美区应该是目前剧集资源最丰富的地区，但是根据本人亲测，美区的资源并不符合国人的观看风格，个人比较推荐香港。</strong></p>
<h2 id="使用dnsmasq解锁netflix奈飞流媒体服务">使用Dnsmasq解锁Netflix（奈飞）流媒体服务</h2>
<p>这里借助了<a href="https://www.moeelf.com/archives/23.html">萌精灵</a> 的脚本实现，这里感谢萌精灵。</p>
<p><strong>安装方法：</strong></p>
<p>支持 Netflix 的代理vps安装</p>
<pre><code class="language-shell">wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh &amp;&amp; bash dnsmasq_sniproxy.sh -f
</code></pre>
<p><strong>卸载方法：</strong></p>
<pre><code class="language-shell">wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh &amp;&amp; bash dnsmasq_sniproxy.sh -u
</code></pre>
<p><strong>使用方法：</strong></p>
<p>将<code>不支持 Netflix 的代理VPS</code>的DNS地址修改为<code>支持 Netflix 的代理vps</code>的IP就可以了，如果不能用，记得只保留一个DNS地址试一下。</p>
<p>⚠️：防止滥用，建议不要随意公布IP地址，或使用防火墙做好限制工作。</p>
<p><strong>调试排错：</strong></p>
<ul>
<li>确认sniproxy有效运行</li>
</ul>
<p>重启sni命令：systemctl restart sniproxy</p>
<p>如果sni不在运行，可检查配置/etc/sniproxy.conf，避免ss、nginx或者其他程序监听80,443，可将其配置文件的80更改为801等。 443端口必须给sni监听放行，查看：netstat -tlunp|grep 443</p>
<ul>
<li>确认防火墙放行443,53</li>
</ul>
<p>调试可直接关闭防火墙 systemctl stop firewalld.service</p>
<p>阿里云/谷歌云/AWS等外部防火墙放行 可通过其他服务器 telnet vpsip 53 以及 telnet vpsip 443 进行测试</p>
<ul>
<li>解析域名</li>
</ul>
<p>尝试用其他服务器配置完毕dns后，解析域名：nslookup <a href="https://www.moeelf.com/tag/netflix">netflix</a>.com 判断IP是否是NETFLIX代理机器IP 如果不存在nslookup命令，CENTOS安装：yum install -y bind-utils，DEBIAN安装：apt-get -y install dnsutils</p>
<h2 id="一键脚本修改推荐修改方式">一键脚本修改推荐修改方式：</h2>
<blockquote>
<p>一键脚本很多都会自带dns服务，会影响流媒体的dns解锁。</p>
</blockquote>
<p><strong>修改方式：</strong></p>
<pre><code class="language-shell">vi /etc/v2ray/config.json
</code></pre>
<p>找到DNS</p>
<pre><code class="language-shell">&quot;dns&quot;: {
        &quot;servers&quot;: [
            {
                &quot;address&quot;: &quot;xxx.xxx.xxx.xxx&quot;,     //此处为支持 Netflix 的代理VPS
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:netflix.com&quot;,
                    &quot;domain:netflix.net&quot;,
                    &quot;domain:nflximg.net&quot;,
                    &quot;domain:nflxvideo.net&quot;,
                    &quot;domain:nflxso.net&quot;,
                    &quot;domain:nflxext.com&quot;
                ]
            },
            &quot;localhost&quot;
        ]
    }
</code></pre>
<p>修改配置完成以后，请重启你的V2RAY服务，或是重启VPS。</p>
<h2 id="使用分流让不同的流媒体走不同的dns">使用分流，让不同的流媒体走不同的DNS</h2>
<p><strong>修改方法：</strong></p>
<pre><code class="language-shell">&quot;dns&quot;: {
        &quot;servers&quot;: [
            {
                &quot;address&quot;: &quot;支持Netflix的代理VPS&quot;,
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:netflix.com&quot;,
                    &quot;domain:netflix.net&quot;,
                    &quot;domain:nflximg.net&quot;,
                    &quot;domain:nflxvideo.net&quot;,
                    &quot;domain:nflxso.net&quot;,
                    &quot;domain:nflxext.com&quot;
                ]
            },
            {
                &quot;address&quot;: &quot;支持的代理VPS&quot;,
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:gamer2-cds.cdn.hinet.net&quot;,
                    &quot;domain:gamer-cds.cdn.hinet.net&quot;,
                    &quot;domain:gamer.com.tw&quot;,
                    &quot;domain:i2.bahamut.com.tw&quot;,
                    &quot;domain:app-measurement.com&quot;
                ]
            },
            {
                &quot;address&quot;: &quot;支持的代理VPS&quot;,
                &quot;port&quot;: 53,
                &quot;domains&quot;: [
                    &quot;domain:bilibili.com&quot;
                ]
            },
            &quot;localhost&quot;
        ]
    }
</code></pre>
<h2 id="域名规则">域名规则</h2>
<h3 id="netflix"><strong>Netflix</strong></h3>
<pre><code class="language-shell">netflix.com
netflix.net
nflximg.net
nflximg.com
nflxvideo.net
nflxso.net
nflxext.com
</code></pre>
<h3 id="spotify"><strong>Spotify</strong></h3>
<pre><code class="language-shell">scdn.co
spotify.com
spoti.fi
</code></pre>
<h3 id="bilibili"><strong>bilibili</strong></h3>
<pre><code class="language-shell">bilibili.com
</code></pre>
<h3 id="动画疯"><strong>动画疯</strong></h3>
<pre><code class="language-shell">gamer-cds.cdn.hinet.net
gamer2-cds.cdn.hinet.net
gamer.com.tw
i2.bahamut.com.tw
app-measurement.com
</code></pre>
<h3 id="line"><strong>Line</strong></h3>
<pre><code class="language-shell">lin.ee
line.me
linenaver.jp
line-apps.com
line-cdn.net
line-scdn.net
linetv.tw
cloudfront.net
</code></pre>
<h3 id="fox"><strong>Fox+</strong></h3>
<pre><code class="language-shell">fox.com
foxdng.com
foxnow.com
foxplus.com
foxplay.com
</code></pre>
<h3 id="bbc"><strong>BBC</strong></h3>
<pre><code class="language-shell">bbc.co
bbc.com
co.uk
llnwd.net
akamaized.net
</code></pre>
<h3 id="hulu"><strong>Hulu</strong></h3>
<pre><code class="language-shell">hulu.com
huluim.com
</code></pre>
<h3 id="hbo美区"><strong>hbo(美区)</strong></h3>
<pre><code class="language-shell">hbonow.com
hbogo.com
hbomax.com
hbo.com
</code></pre>
<h3 id="disney"><strong>disney</strong></h3>
<pre><code class="language-shell">disney.com
disneyjunior.com
disneyplus.com
disney-plus.net
dssott.com
bamgrid.com
amazonaws.com
go.com
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS双软路由使用jump实现公网端口转发]]></title>
        <id>https://ziznah.github.io/post/19/</id>
        <link href="https://ziznah.github.io/post/19/">
        </link>
        <updated>2020-11-25T15:57:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>由于使用了双软路由，ROS上设置upnp，端口不能实现自动转发，所以使用ROS的jump方式来实现这个功能。</p>
</blockquote>
<ol>
<li>首先在ROS功能界面打开 IP → Firewall → NAT</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125232043901.png" alt="image-20201125232043901" loading="lazy"></figure>
<ol start="2">
<li>
<p>添加一个 NAT 规则 (设置jump)</p>
<p>1️⃣ General 设置</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125232323939.png" alt="image-20201125232323939" loading="lazy"></figure>
<p>2️⃣ Action 设置</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125232515115.png" alt="image-20201125232515115" loading="lazy"></figure>
</li>
<li>
<p>设置需要的端口转发</p>
<p>1️⃣ 添加一个 NAT 规则 (General 设置)</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125233019443.png" alt="image-20201125233019443" loading="lazy"></figure>
<p>2️⃣ Action 设置</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125233236947.png" alt="image-20201125233236947" loading="lazy"></figure>
<p>到此端口转发就设置完成。</p>
</li>
<li>
<p>番外</p>
<blockquote>
<p>由于公网每次拨号，可能导致公网地址会发生改变，这里使用ROS的脚本来实现自动设置JUMP里面的公网地址。</p>
</blockquote>
<p>1️⃣ 在ROS界面 System → scripts 添加一个脚本</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234013781.png" alt="image-20201125234013781" loading="lazy"></figure>
<p>2️⃣ 设置脚本</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234414683.png" alt="image-20201125234414683" loading="lazy"></figure>
<p><code>script脚本代码：</code></p>
<pre><code class="language-shell">:global addold
:global addnew
 :set addnew [/interface get [/interface find name=&quot;pppoe-out1&quot;] running]
 :if ($addnew=true) do={
  :set addold [/ip address get [/ip address find dynamic=yes interface=&quot;pppoe-out1&quot;] address]
  :set addold [:pick $addold 0 ([:len $addold ] -3)]
   /ip firewall nat set [/ip firewall nat find comment=&quot;dynamic_nat&quot;] dst-address=$addold
}
</code></pre>
<p>3️⃣ 设置一个定时Profile</p>
<p>ROS界面 → PPP → Profiles 添加一个新的Profile</p>
<figure data-type="image" tabindex="8"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234658556.png" alt="image-20201125234658556" loading="lazy"></figure>
<p>设置Profiles</p>
<figure data-type="image" tabindex="9"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125234911018.png" alt="image-20201125234911018" loading="lazy"></figure>
<p>设置 Scripts</p>
<figure data-type="image" tabindex="10"><img src="https://gitee.com/zoengzihaam/ImgBed/raw/master/images/image-20201125235117699.png" alt="image-20201125235117699" loading="lazy"></figure>
<p><code>profile脚本代码：</code></p>
<pre><code class="language-shell">delay 3s
:execute &quot;dynamic_nat&quot;
</code></pre>
</li>
</ol>
<p>🌈以上，公网端口转发的jump设置全部设置完毕，如果过程有错误的地方，还请各位指教一起讨论，谢谢。💨</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker开机自启]]></title>
        <id>https://ziznah.github.io/post/16/</id>
        <link href="https://ziznah.github.io/post/16/">
        </link>
        <updated>2020-07-25T14:51:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker开机自启">docker开机自启</h1>
<h2 id="一-docker服务设置自动启动">一、docker服务设置自动启动</h2>
<blockquote>
<p>适用于yum安装的各种服务</p>
</blockquote>
<ul>
<li>查看已启动的服务</li>
</ul>
<pre><code class="language-shell">systemctl list-units --type=service
</code></pre>
<ul>
<li>查看是否设置开机启动</li>
</ul>
<pre><code class="language-shell">systemctl list-unit-files | grep enable
</code></pre>
<ul>
<li>设置开机启动</li>
</ul>
<pre><code class="language-shell">systemctl enable docker.service
</code></pre>
<ul>
<li>关闭开机启动</li>
</ul>
<pre><code class="language-shell">systemctl disable docker.service
</code></pre>
<h2 id="二-docker容器设置自动启动">二、docker容器设置自动启动</h2>
<ul>
<li>启动时加 --restart=always</li>
</ul>
<pre><code class="language-shell">docker run tomcat -it -d -p 8080:8080 --restart=always
</code></pre>
<ul>
<li>
<p>如果已经运行过的项目</p>
<p>针对：已经启动的项目，使用update更新</p>
</li>
</ul>
<pre><code class="language-shell">docker update --restart=always imagesID
</code></pre>
<p><strong>restart参数的启动选项</strong></p>
<table>
<thead>
<tr>
<th>Flag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>no</td>
<td>不自动重启容器. (默认value)</td>
</tr>
<tr>
<td>on-failure</td>
<td>容器发生error而退出(容器退出状态不为0)重启容器</td>
</tr>
<tr>
<td>unless-stopped</td>
<td>在容器已经stop掉或Docker stoped/restarted的时候才重启容器</td>
</tr>
<tr>
<td>always</td>
<td>在容器已经stop掉或Docker stoped/restarted的时候才重启容器</td>
</tr>
</tbody>
</table>
<hr>
<p>转载至：<a href="https://www.cnblogs.com/gcgc/p/10494615.html#_label0">秋寻草</a></p>
]]></content>
    </entry>
</feed>